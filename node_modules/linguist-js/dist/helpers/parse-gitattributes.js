"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const norm_path_1 = require("./norm-path");
/**
 * Parses a gitattributes file.
 */
function parseAttributes(content, folderRoot = '.') {
    var _a, _b;
    const output = [];
    for (const rawLine of content.split('\n')) {
        const line = rawLine.replace(/#.*/, '').trim();
        if (!line)
            continue;
        const parts = line.split(/\s+/g);
        const fileGlob = parts[0];
        const relFileGlob = (0, norm_path_1.normPath)(folderRoot, fileGlob);
        const attrParts = parts.slice(1);
        const isTrue = (str) => !str.startsWith('-') && !str.endsWith('=false');
        const isFalse = (str) => str.startsWith('-') || str.endsWith('=false');
        const trueParts = (str) => attrParts.filter(part => part.includes(str) && isTrue(part));
        const falseParts = (str) => attrParts.filter(part => part.includes(str) && isFalse(part));
        const hasTrueParts = (str) => trueParts(str).length > 0;
        const hasFalseParts = (str) => falseParts(str).length > 0;
        const attrs = {
            'generated': hasTrueParts('linguist-generated') ? true : hasFalseParts('linguist-generated') ? false : null,
            'vendored': hasTrueParts('linguist-vendored') ? true : hasFalseParts('linguist-vendored') ? false : null,
            'documentation': hasTrueParts('linguist-documentation') ? true : hasFalseParts('linguist-documentation') ? false : null,
            'binary': hasTrueParts('binary') || hasFalseParts('text') ? true : hasFalseParts('binary') || hasTrueParts('text') ? false : null,
            'language': (_b = (_a = trueParts('linguist-language').at(-1)) === null || _a === void 0 ? void 0 : _a.split('=')[1]) !== null && _b !== void 0 ? _b : null,
        };
        output.push({ glob: relFileGlob, attrs });
    }
    return output;
}
exports.default = parseAttributes;
